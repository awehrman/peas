// @generated by Peggy 4.1.1.
//
// https://peggyjs.org/


function peg$subclass(child, parent) {
  function C() { this.constructor = child; }
  C.prototype = parent.prototype;
  child.prototype = new C();
}

function peg$SyntaxError(message, expected, found, location) {
  var self = Error.call(this, message);
  // istanbul ignore next Check is a necessary evil to support older environments
  if (Object.setPrototypeOf) {
    Object.setPrototypeOf(self, peg$SyntaxError.prototype);
  }
  self.expected = expected;
  self.found = found;
  self.location = location;
  self.name = "SyntaxError";
  return self;
}

peg$subclass(peg$SyntaxError, Error);

function peg$padEnd(str, targetLength, padString) {
  padString = padString || " ";
  if (str.length > targetLength) { return str; }
  targetLength -= str.length;
  padString += padString.repeat(targetLength);
  return str + padString.slice(0, targetLength);
}

peg$SyntaxError.prototype.format = function(sources) {
  var str = "Error: " + this.message;
  if (this.location) {
    var src = null;
    var k;
    for (k = 0; k < sources.length; k++) {
      if (sources[k].source === this.location.source) {
        src = sources[k].text.split(/\r\n|\n|\r/g);
        break;
      }
    }
    var s = this.location.start;
    var offset_s = (this.location.source && (typeof this.location.source.offset === "function"))
      ? this.location.source.offset(s)
      : s;
    var loc = this.location.source + ":" + offset_s.line + ":" + offset_s.column;
    if (src) {
      var e = this.location.end;
      var filler = peg$padEnd("", offset_s.line.toString().length, ' ');
      var line = src[s.line - 1];
      var last = s.line === e.line ? e.column : line.length + 1;
      var hatLen = (last - s.column) || 1;
      str += "\n --> " + loc + "\n"
          + filler + " |\n"
          + offset_s.line + " | " + line + "\n"
          + filler + " | " + peg$padEnd("", s.column - 1, ' ')
          + peg$padEnd("", hatLen, "^");
    } else {
      str += "\n at " + loc;
    }
  }
  return str;
};

peg$SyntaxError.buildMessage = function(expected, found) {
  var DESCRIBE_EXPECTATION_FNS = {
    literal: function(expectation) {
      return "\"" + literalEscape(expectation.text) + "\"";
    },

    class: function(expectation) {
      var escapedParts = expectation.parts.map(function(part) {
        return Array.isArray(part)
          ? classEscape(part[0]) + "-" + classEscape(part[1])
          : classEscape(part);
      });

      return "[" + (expectation.inverted ? "^" : "") + escapedParts.join("") + "]";
    },

    any: function() {
      return "any character";
    },

    end: function() {
      return "end of input";
    },

    other: function(expectation) {
      return expectation.description;
    }
  };

  function hex(ch) {
    return ch.charCodeAt(0).toString(16).toUpperCase();
  }

  function literalEscape(s) {
    return s
      .replace(/\\/g, "\\\\")
      .replace(/"/g,  "\\\"")
      .replace(/\0/g, "\\0")
      .replace(/\t/g, "\\t")
      .replace(/\n/g, "\\n")
      .replace(/\r/g, "\\r")
      .replace(/[\x00-\x0F]/g,          function(ch) { return "\\x0" + hex(ch); })
      .replace(/[\x10-\x1F\x7F-\x9F]/g, function(ch) { return "\\x"  + hex(ch); });
  }

  function classEscape(s) {
    return s
      .replace(/\\/g, "\\\\")
      .replace(/\]/g, "\\]")
      .replace(/\^/g, "\\^")
      .replace(/-/g,  "\\-")
      .replace(/\0/g, "\\0")
      .replace(/\t/g, "\\t")
      .replace(/\n/g, "\\n")
      .replace(/\r/g, "\\r")
      .replace(/[\x00-\x0F]/g,          function(ch) { return "\\x0" + hex(ch); })
      .replace(/[\x10-\x1F\x7F-\x9F]/g, function(ch) { return "\\x"  + hex(ch); });
  }

  function describeExpectation(expectation) {
    return DESCRIBE_EXPECTATION_FNS[expectation.type](expectation);
  }

  function describeExpected(expected) {
    var descriptions = expected.map(describeExpectation);
    var i, j;

    descriptions.sort();

    if (descriptions.length > 0) {
      for (i = 1, j = 1; i < descriptions.length; i++) {
        if (descriptions[i - 1] !== descriptions[i]) {
          descriptions[j] = descriptions[i];
          j++;
        }
      }
      descriptions.length = j;
    }

    switch (descriptions.length) {
      case 1:
        return descriptions[0];

      case 2:
        return descriptions[0] + " or " + descriptions[1];

      default:
        return descriptions.slice(0, -1).join(", ")
          + ", or "
          + descriptions[descriptions.length - 1];
    }
  }

  function describeFound(found) {
    return found ? "\"" + literalEscape(found) + "\"" : "end of input";
  }

  return "Expected " + describeExpected(expected) + " but " + describeFound(found) + " found.";
};

function peg$parse(input, options) {
  options = options !== undefined ? options : {};

  var peg$FAILED = {};
  var peg$source = options.grammarSource;

  var peg$startRuleFunctions = { start: peg$parsestart };
  var peg$startRuleFunction = peg$parsestart;

  var peg$c0 = "quarter";
  var peg$c1 = "half";
  var peg$c2 = "a";
  var peg$c3 = "dozen";
  var peg$c4 = "seventeen";
  var peg$c5 = "thirteen";
  var peg$c6 = "numerous";
  var peg$c7 = "nineteen";
  var peg$c8 = "fourteen";
  var peg$c9 = "eighteen";
  var peg$c10 = "sixteen";
  var peg$c11 = "several";
  var peg$c12 = "seventy";
  var peg$c13 = "hundred";
  var peg$c14 = "fifteen";
  var peg$c15 = "amounts";
  var peg$c16 = "twenty";
  var peg$c17 = "twelve";
  var peg$c18 = "thirty";
  var peg$c19 = "single";
  var peg$c20 = "ninety";
  var peg$c21 = "eleven";
  var peg$c22 = "eighty";
  var peg$c23 = "couple";
  var peg$c24 = "amount";
  var peg$c25 = "three";
  var peg$c26 = "third";
  var peg$c27 = "sixty";
  var peg$c28 = "sixth";
  var peg$c29 = "seven";
  var peg$c30 = "forty";
  var peg$c31 = "fifty";
  var peg$c32 = "eight";
  var peg$c33 = "ten";
  var peg$c34 = "some";
  var peg$c35 = "nine";
  var peg$c36 = "four";
  var peg$c37 = "five";
  var peg$c38 = "two";
  var peg$c39 = "six";
  var peg$c40 = "one";
  var peg$c41 = "lot";

  var peg$r0 = /^[0-9]/;
  var peg$r1 = /^[ \t\n\r ]/;
  var peg$r2 = /^[\-_~]/;
  var peg$r3 = /^[\u2010\u2011\u2012\u2013\u2014]/;
  var peg$r4 = /^[\/\u2044|]/;
  var peg$r5 = /^["\u201C\u201D]/;
  var peg$r6 = /^['`\xB4\u2018\u2019]/;
  var peg$r7 = /^[a-z]/i;

  var peg$e0 = peg$otherExpectation("Ingredient Line");
  var peg$e1 = peg$otherExpectation("Ingredient");
  var peg$e2 = peg$otherExpectation("Amount");
  var peg$e3 = peg$otherExpectation("Digits");
  var peg$e4 = peg$classExpectation([["0", "9"]], false, false);
  var peg$e5 = peg$otherExpectation("Whitespace");
  var peg$e6 = peg$classExpectation([" ", "\t", "\n", "\r", " "], false, false);
  var peg$e7 = peg$otherExpectation("Dashes");
  var peg$e8 = peg$classExpectation(["-", "_", "~"], false, false);
  var peg$e9 = peg$classExpectation(["\u2010", "\u2011", "\u2012", "\u2013", "\u2014"], false, false);
  var peg$e10 = peg$otherExpectation("Slashes");
  var peg$e11 = peg$classExpectation(["/", "\u2044", "|"], false, false);
  var peg$e12 = peg$otherExpectation("Quotes");
  var peg$e13 = peg$classExpectation(["\"", "\u201C", "\u201D"], false, false);
  var peg$e14 = peg$classExpectation(["'", "`", "\xB4", "\u2018", "\u2019"], false, false);
  var peg$e15 = peg$otherExpectation("Letter");
  var peg$e16 = peg$classExpectation([["a", "z"]], false, true);
  var peg$e17 = peg$otherExpectation("Digit");
  var peg$e18 = peg$otherExpectation("Amount Keyword");
  var peg$e19 = peg$literalExpectation("quarter", false);
  var peg$e20 = peg$literalExpectation("half", true);
  var peg$e21 = peg$literalExpectation("a", true);
  var peg$e22 = peg$literalExpectation("dozen", true);
  var peg$e23 = peg$literalExpectation("seventeen", true);
  var peg$e24 = peg$literalExpectation("thirteen", true);
  var peg$e25 = peg$literalExpectation("quarter", true);
  var peg$e26 = peg$literalExpectation("numerous", true);
  var peg$e27 = peg$literalExpectation("nineteen", true);
  var peg$e28 = peg$literalExpectation("fourteen", true);
  var peg$e29 = peg$literalExpectation("eighteen", true);
  var peg$e30 = peg$literalExpectation("sixteen", true);
  var peg$e31 = peg$literalExpectation("several", true);
  var peg$e32 = peg$literalExpectation("seventy", true);
  var peg$e33 = peg$literalExpectation("hundred", true);
  var peg$e34 = peg$literalExpectation("fifteen", true);
  var peg$e35 = peg$literalExpectation("amounts", true);
  var peg$e36 = peg$literalExpectation("twenty", true);
  var peg$e37 = peg$literalExpectation("twelve", true);
  var peg$e38 = peg$literalExpectation("thirty", true);
  var peg$e39 = peg$literalExpectation("single", true);
  var peg$e40 = peg$literalExpectation("ninety", true);
  var peg$e41 = peg$literalExpectation("eleven", true);
  var peg$e42 = peg$literalExpectation("eighty", true);
  var peg$e43 = peg$literalExpectation("couple", true);
  var peg$e44 = peg$literalExpectation("amount", true);
  var peg$e45 = peg$literalExpectation("three", true);
  var peg$e46 = peg$literalExpectation("third", true);
  var peg$e47 = peg$literalExpectation("sixty", true);
  var peg$e48 = peg$literalExpectation("sixth", true);
  var peg$e49 = peg$literalExpectation("seven", true);
  var peg$e50 = peg$literalExpectation("forty", true);
  var peg$e51 = peg$literalExpectation("fifty", true);
  var peg$e52 = peg$literalExpectation("eight", true);
  var peg$e53 = peg$literalExpectation("ten", true);
  var peg$e54 = peg$literalExpectation("some", true);
  var peg$e55 = peg$literalExpectation("nine", true);
  var peg$e56 = peg$literalExpectation("four", true);
  var peg$e57 = peg$literalExpectation("five", true);
  var peg$e58 = peg$literalExpectation("two", true);
  var peg$e59 = peg$literalExpectation("six", true);
  var peg$e60 = peg$literalExpectation("one", true);
  var peg$e61 = peg$literalExpectation("lot", true);

  var peg$f0 = function(parsed) {
      return {
        input: text(parsed),
        output: formatOutput(parsed.values),
        ingredients: getIngredients(parsed.values),
        parsed: [parsed]
      };
    };
  var peg$f1 = function(amt, ing) {
  	/* strip out any empty values */
  	const values = [amt, ing].flatMap(value => value);
  	return {
    	rule: `#ORDER_ingredient_line`,
    	type: 'ingredient_line',
    	values
    };
  };
  var peg$f2 = function(ing) {
  	return {
    	rule: `#ORDER_ingredient`,
    	type: 'ingredient',
    	values: [ing.toLowerCase()]
    };
  };
  var peg$f3 = function(amt) {
  		return {
    		rule: `#ORDER_amount >> ${amt.rule}`,
    		type: 'amount',
    		values: [...amt.values] // ...amt
    	};
  	};
  var peg$f4 = function(amt) {
      return {
        rule: `#ORDER_amount >> ${amt.rule}`,
        type: 'amount',
        values: [...amt.values]
      };
    };
  var peg$f5 = function(digits) {
    return {
      rule: `#ORDER_digits`,
      values: [digits]
    };
  };
  var peg$f6 = function() { return ' '; };
  var peg$f7 = function() { return '-'; };
  var peg$f8 = function() { return '-'; };
  var peg$f9 = function() { return '\/'; };
  var peg$f10 = function() { return '\"'; };
  var peg$f11 = function() { return '\''; };
  var peg$f12 = function(amt) {
	    return {
    		rule: `#ORDER_amount_keyword`,
    		values: [amt.toLowerCase()]
    	};
  	};
  var peg$currPos = options.peg$currPos | 0;
  var peg$savedPos = peg$currPos;
  var peg$posDetailsCache = [{ line: 1, column: 1 }];
  var peg$maxFailPos = peg$currPos;
  var peg$maxFailExpected = options.peg$maxFailExpected || [];
  var peg$silentFails = options.peg$silentFails | 0;

  var peg$result;

  if (options.startRule) {
    if (!(options.startRule in peg$startRuleFunctions)) {
      throw new Error("Can't start parsing from rule \"" + options.startRule + "\".");
    }

    peg$startRuleFunction = peg$startRuleFunctions[options.startRule];
  }

  function text() {
    return input.substring(peg$savedPos, peg$currPos);
  }

  function offset() {
    return peg$savedPos;
  }

  function range() {
    return {
      source: peg$source,
      start: peg$savedPos,
      end: peg$currPos
    };
  }

  function location() {
    return peg$computeLocation(peg$savedPos, peg$currPos);
  }

  function expected(description, location) {
    location = location !== undefined
      ? location
      : peg$computeLocation(peg$savedPos, peg$currPos);

    throw peg$buildStructuredError(
      [peg$otherExpectation(description)],
      input.substring(peg$savedPos, peg$currPos),
      location
    );
  }

  function error(message, location) {
    location = location !== undefined
      ? location
      : peg$computeLocation(peg$savedPos, peg$currPos);

    throw peg$buildSimpleError(message, location);
  }

  function peg$literalExpectation(text, ignoreCase) {
    return { type: "literal", text: text, ignoreCase: ignoreCase };
  }

  function peg$classExpectation(parts, inverted, ignoreCase) {
    return { type: "class", parts: parts, inverted: inverted, ignoreCase: ignoreCase };
  }

  function peg$anyExpectation() {
    return { type: "any" };
  }

  function peg$endExpectation() {
    return { type: "end" };
  }

  function peg$otherExpectation(description) {
    return { type: "other", description: description };
  }

  function peg$computePosDetails(pos) {
    var details = peg$posDetailsCache[pos];
    var p;

    if (details) {
      return details;
    } else {
      if (pos >= peg$posDetailsCache.length) {
        p = peg$posDetailsCache.length - 1;
      } else {
        p = pos;
        while (!peg$posDetailsCache[--p]) {}
      }

      details = peg$posDetailsCache[p];
      details = {
        line: details.line,
        column: details.column
      };

      while (p < pos) {
        if (input.charCodeAt(p) === 10) {
          details.line++;
          details.column = 1;
        } else {
          details.column++;
        }

        p++;
      }

      peg$posDetailsCache[pos] = details;

      return details;
    }
  }

  function peg$computeLocation(startPos, endPos, offset) {
    var startPosDetails = peg$computePosDetails(startPos);
    var endPosDetails = peg$computePosDetails(endPos);

    var res = {
      source: peg$source,
      start: {
        offset: startPos,
        line: startPosDetails.line,
        column: startPosDetails.column
      },
      end: {
        offset: endPos,
        line: endPosDetails.line,
        column: endPosDetails.column
      }
    };
    if (offset && peg$source && (typeof peg$source.offset === "function")) {
      res.start = peg$source.offset(res.start);
      res.end = peg$source.offset(res.end);
    }
    return res;
  }

  function peg$fail(expected) {
    if (peg$currPos < peg$maxFailPos) { return; }

    if (peg$currPos > peg$maxFailPos) {
      peg$maxFailPos = peg$currPos;
      peg$maxFailExpected = [];
    }

    peg$maxFailExpected.push(expected);
  }

  function peg$buildSimpleError(message, location) {
    return new peg$SyntaxError(message, null, null, location);
  }

  function peg$buildStructuredError(expected, found, location) {
    return new peg$SyntaxError(
      peg$SyntaxError.buildMessage(expected, found),
      expected,
      found,
      location
    );
  }

  function peg$parsestart() {
    var s0, s1;

    s0 = peg$currPos;
    s1 = peg$parseingredientLine();
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$f0(s1);
    }
    s0 = s1;

    return s0;
  }

  function peg$parseingredientLine() {
    var s0, s1, s2, s3;

    peg$silentFails++;
    s0 = peg$currPos;
    s1 = [];
    s2 = peg$parseamount();
    while (s2 !== peg$FAILED) {
      s1.push(s2);
      s2 = peg$parseamount();
    }
    s2 = [];
    s3 = peg$parse_();
    while (s3 !== peg$FAILED) {
      s2.push(s3);
      s3 = peg$parse_();
    }
    s3 = peg$parseingredient();
    if (s3 !== peg$FAILED) {
      peg$savedPos = s0;
      s0 = peg$f1(s1, s3);
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e0); }
    }

    return s0;
  }

  function peg$parseingredient() {
    var s0, s1, s2, s3;

    peg$silentFails++;
    s0 = peg$currPos;
    s1 = peg$currPos;
    s2 = [];
    s3 = peg$parseletter();
    if (s3 !== peg$FAILED) {
      while (s3 !== peg$FAILED) {
        s2.push(s3);
        s3 = peg$parseletter();
      }
    } else {
      s2 = peg$FAILED;
    }
    if (s2 !== peg$FAILED) {
      s1 = input.substring(s1, peg$currPos);
    } else {
      s1 = s2;
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$f2(s1);
    }
    s0 = s1;
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e1); }
    }

    return s0;
  }

  function peg$parseamount() {
    var s0, s1;

    peg$silentFails++;
    s0 = peg$currPos;
    s1 = peg$parseamountKeyword();
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$f3(s1);
    }
    s0 = s1;
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      s1 = peg$parsedigits();
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$f4(s1);
      }
      s0 = s1;
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e2); }
    }

    return s0;
  }

  function peg$parsedigits() {
    var s0, s1, s2, s3;

    peg$silentFails++;
    s0 = peg$currPos;
    s1 = peg$currPos;
    s2 = [];
    s3 = input.charAt(peg$currPos);
    if (peg$r0.test(s3)) {
      peg$currPos++;
    } else {
      s3 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e4); }
    }
    if (s3 !== peg$FAILED) {
      while (s3 !== peg$FAILED) {
        s2.push(s3);
        s3 = input.charAt(peg$currPos);
        if (peg$r0.test(s3)) {
          peg$currPos++;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e4); }
        }
      }
    } else {
      s2 = peg$FAILED;
    }
    if (s2 !== peg$FAILED) {
      s1 = input.substring(s1, peg$currPos);
    } else {
      s1 = s2;
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$f5(s1);
    }
    s0 = s1;
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e3); }
    }

    return s0;
  }

  function peg$parse_() {
    var s0, s1;

    peg$silentFails++;
    s0 = peg$currPos;
    s1 = input.charAt(peg$currPos);
    if (peg$r1.test(s1)) {
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e6); }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$f6();
    }
    s0 = s1;
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e5); }
    }

    return s0;
  }

  function peg$parsedashes() {
    var s0, s1;

    peg$silentFails++;
    s0 = peg$currPos;
    s1 = input.charAt(peg$currPos);
    if (peg$r2.test(s1)) {
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e8); }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$f7();
    }
    s0 = s1;
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      s1 = input.charAt(peg$currPos);
      if (peg$r3.test(s1)) {
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e9); }
      }
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$f8();
      }
      s0 = s1;
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e7); }
    }

    return s0;
  }

  function peg$parseslashes() {
    var s0, s1;

    peg$silentFails++;
    s0 = peg$currPos;
    s1 = input.charAt(peg$currPos);
    if (peg$r4.test(s1)) {
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e11); }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$f9();
    }
    s0 = s1;
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e10); }
    }

    return s0;
  }

  function peg$parsequotes() {
    var s0, s1;

    peg$silentFails++;
    s0 = peg$currPos;
    s1 = input.charAt(peg$currPos);
    if (peg$r5.test(s1)) {
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e13); }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$f10();
    }
    s0 = s1;
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      s1 = input.charAt(peg$currPos);
      if (peg$r6.test(s1)) {
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e14); }
      }
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$f11();
      }
      s0 = s1;
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e12); }
    }

    return s0;
  }

  function peg$parseletter() {
    var s0, s1;

    peg$silentFails++;
    s0 = input.charAt(peg$currPos);
    if (peg$r7.test(s0)) {
      peg$currPos++;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e16); }
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e15); }
    }

    return s0;
  }

  function peg$parsedigit() {
    var s0, s1;

    peg$silentFails++;
    s0 = input.charAt(peg$currPos);
    if (peg$r0.test(s0)) {
      peg$currPos++;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e4); }
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e17); }
    }

    return s0;
  }

  function peg$parseamountKeyword() {
    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12;

    peg$silentFails++;
    s0 = peg$currPos;
    s1 = peg$currPos;
    if (input.substr(peg$currPos, 7) === peg$c0) {
      s2 = peg$c0;
      peg$currPos += 7;
    } else {
      s2 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e19); }
    }
    if (s2 === peg$FAILED) {
      s2 = peg$currPos;
      s3 = peg$currPos;
      s4 = input.substr(peg$currPos, 4);
      if (s4.toLowerCase() === peg$c1) {
        peg$currPos += 4;
      } else {
        s4 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e20); }
      }
      if (s4 !== peg$FAILED) {
        s5 = [];
        s6 = peg$parse_();
        while (s6 !== peg$FAILED) {
          s5.push(s6);
          s6 = peg$parse_();
        }
        s6 = [];
        s7 = peg$parsedashes();
        while (s7 !== peg$FAILED) {
          s6.push(s7);
          s7 = peg$parsedashes();
        }
        s7 = [];
        s8 = peg$parse_();
        while (s8 !== peg$FAILED) {
          s7.push(s8);
          s8 = peg$parse_();
        }
        s8 = input.charAt(peg$currPos);
        if (s8.toLowerCase() === peg$c2) {
          peg$currPos++;
        } else {
          s8 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e21); }
        }
        if (s8 !== peg$FAILED) {
          s9 = [];
          s10 = peg$parse_();
          while (s10 !== peg$FAILED) {
            s9.push(s10);
            s10 = peg$parse_();
          }
          s10 = [];
          s11 = peg$parsedashes();
          while (s11 !== peg$FAILED) {
            s10.push(s11);
            s11 = peg$parsedashes();
          }
          s11 = [];
          s12 = peg$parse_();
          while (s12 !== peg$FAILED) {
            s11.push(s12);
            s12 = peg$parse_();
          }
          s12 = input.substr(peg$currPos, 5);
          if (s12.toLowerCase() === peg$c3) {
            peg$currPos += 5;
          } else {
            s12 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e22); }
          }
          if (s12 !== peg$FAILED) {
            s4 = [s4, s5, s6, s7, s8, s9, s10, s11, s12];
            s3 = s4;
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
      } else {
        peg$currPos = s3;
        s3 = peg$FAILED;
      }
      if (s3 !== peg$FAILED) {
        s2 = input.substring(s2, peg$currPos);
      } else {
        s2 = s3;
      }
      if (s2 === peg$FAILED) {
        s2 = input.substr(peg$currPos, 9);
        if (s2.toLowerCase() === peg$c4) {
          peg$currPos += 9;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e23); }
        }
        if (s2 === peg$FAILED) {
          s2 = input.substr(peg$currPos, 8);
          if (s2.toLowerCase() === peg$c5) {
            peg$currPos += 8;
          } else {
            s2 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e24); }
          }
          if (s2 === peg$FAILED) {
            s2 = peg$currPos;
            s3 = peg$currPos;
            s4 = input.substr(peg$currPos, 7);
            if (s4.toLowerCase() === peg$c0) {
              peg$currPos += 7;
            } else {
              s4 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$e25); }
            }
            if (s4 !== peg$FAILED) {
              s5 = [];
              s6 = peg$parse_();
              while (s6 !== peg$FAILED) {
                s5.push(s6);
                s6 = peg$parse_();
              }
              s6 = [];
              s7 = peg$parsedashes();
              while (s7 !== peg$FAILED) {
                s6.push(s7);
                s7 = peg$parsedashes();
              }
              s7 = [];
              s8 = peg$parse_();
              while (s8 !== peg$FAILED) {
                s7.push(s8);
                s8 = peg$parse_();
              }
              s8 = '';
              s4 = [s4, s5, s6, s7, s8];
              s3 = s4;
            } else {
              peg$currPos = s3;
              s3 = peg$FAILED;
            }
            if (s3 !== peg$FAILED) {
              s2 = input.substring(s2, peg$currPos);
            } else {
              s2 = s3;
            }
            if (s2 === peg$FAILED) {
              s2 = input.substr(peg$currPos, 8);
              if (s2.toLowerCase() === peg$c6) {
                peg$currPos += 8;
              } else {
                s2 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$e26); }
              }
              if (s2 === peg$FAILED) {
                s2 = input.substr(peg$currPos, 8);
                if (s2.toLowerCase() === peg$c7) {
                  peg$currPos += 8;
                } else {
                  s2 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$e27); }
                }
                if (s2 === peg$FAILED) {
                  s2 = input.substr(peg$currPos, 8);
                  if (s2.toLowerCase() === peg$c8) {
                    peg$currPos += 8;
                  } else {
                    s2 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$e28); }
                  }
                  if (s2 === peg$FAILED) {
                    s2 = input.substr(peg$currPos, 8);
                    if (s2.toLowerCase() === peg$c9) {
                      peg$currPos += 8;
                    } else {
                      s2 = peg$FAILED;
                      if (peg$silentFails === 0) { peg$fail(peg$e29); }
                    }
                    if (s2 === peg$FAILED) {
                      s2 = input.substr(peg$currPos, 7);
                      if (s2.toLowerCase() === peg$c10) {
                        peg$currPos += 7;
                      } else {
                        s2 = peg$FAILED;
                        if (peg$silentFails === 0) { peg$fail(peg$e30); }
                      }
                      if (s2 === peg$FAILED) {
                        s2 = input.substr(peg$currPos, 7);
                        if (s2.toLowerCase() === peg$c11) {
                          peg$currPos += 7;
                        } else {
                          s2 = peg$FAILED;
                          if (peg$silentFails === 0) { peg$fail(peg$e31); }
                        }
                        if (s2 === peg$FAILED) {
                          s2 = input.substr(peg$currPos, 7);
                          if (s2.toLowerCase() === peg$c12) {
                            peg$currPos += 7;
                          } else {
                            s2 = peg$FAILED;
                            if (peg$silentFails === 0) { peg$fail(peg$e32); }
                          }
                          if (s2 === peg$FAILED) {
                            s2 = input.substr(peg$currPos, 7);
                            if (s2.toLowerCase() === peg$c13) {
                              peg$currPos += 7;
                            } else {
                              s2 = peg$FAILED;
                              if (peg$silentFails === 0) { peg$fail(peg$e33); }
                            }
                            if (s2 === peg$FAILED) {
                              s2 = input.substr(peg$currPos, 7);
                              if (s2.toLowerCase() === peg$c14) {
                                peg$currPos += 7;
                              } else {
                                s2 = peg$FAILED;
                                if (peg$silentFails === 0) { peg$fail(peg$e34); }
                              }
                              if (s2 === peg$FAILED) {
                                s2 = input.substr(peg$currPos, 7);
                                if (s2.toLowerCase() === peg$c15) {
                                  peg$currPos += 7;
                                } else {
                                  s2 = peg$FAILED;
                                  if (peg$silentFails === 0) { peg$fail(peg$e35); }
                                }
                                if (s2 === peg$FAILED) {
                                  s2 = input.substr(peg$currPos, 6);
                                  if (s2.toLowerCase() === peg$c16) {
                                    peg$currPos += 6;
                                  } else {
                                    s2 = peg$FAILED;
                                    if (peg$silentFails === 0) { peg$fail(peg$e36); }
                                  }
                                  if (s2 === peg$FAILED) {
                                    s2 = input.substr(peg$currPos, 6);
                                    if (s2.toLowerCase() === peg$c17) {
                                      peg$currPos += 6;
                                    } else {
                                      s2 = peg$FAILED;
                                      if (peg$silentFails === 0) { peg$fail(peg$e37); }
                                    }
                                    if (s2 === peg$FAILED) {
                                      s2 = input.substr(peg$currPos, 6);
                                      if (s2.toLowerCase() === peg$c18) {
                                        peg$currPos += 6;
                                      } else {
                                        s2 = peg$FAILED;
                                        if (peg$silentFails === 0) { peg$fail(peg$e38); }
                                      }
                                      if (s2 === peg$FAILED) {
                                        s2 = input.substr(peg$currPos, 6);
                                        if (s2.toLowerCase() === peg$c19) {
                                          peg$currPos += 6;
                                        } else {
                                          s2 = peg$FAILED;
                                          if (peg$silentFails === 0) { peg$fail(peg$e39); }
                                        }
                                        if (s2 === peg$FAILED) {
                                          s2 = input.substr(peg$currPos, 6);
                                          if (s2.toLowerCase() === peg$c20) {
                                            peg$currPos += 6;
                                          } else {
                                            s2 = peg$FAILED;
                                            if (peg$silentFails === 0) { peg$fail(peg$e40); }
                                          }
                                          if (s2 === peg$FAILED) {
                                            s2 = input.substr(peg$currPos, 6);
                                            if (s2.toLowerCase() === peg$c21) {
                                              peg$currPos += 6;
                                            } else {
                                              s2 = peg$FAILED;
                                              if (peg$silentFails === 0) { peg$fail(peg$e41); }
                                            }
                                            if (s2 === peg$FAILED) {
                                              s2 = input.substr(peg$currPos, 6);
                                              if (s2.toLowerCase() === peg$c22) {
                                                peg$currPos += 6;
                                              } else {
                                                s2 = peg$FAILED;
                                                if (peg$silentFails === 0) { peg$fail(peg$e42); }
                                              }
                                              if (s2 === peg$FAILED) {
                                                s2 = input.substr(peg$currPos, 6);
                                                if (s2.toLowerCase() === peg$c23) {
                                                  peg$currPos += 6;
                                                } else {
                                                  s2 = peg$FAILED;
                                                  if (peg$silentFails === 0) { peg$fail(peg$e43); }
                                                }
                                                if (s2 === peg$FAILED) {
                                                  s2 = input.substr(peg$currPos, 6);
                                                  if (s2.toLowerCase() === peg$c24) {
                                                    peg$currPos += 6;
                                                  } else {
                                                    s2 = peg$FAILED;
                                                    if (peg$silentFails === 0) { peg$fail(peg$e44); }
                                                  }
                                                  if (s2 === peg$FAILED) {
                                                    s2 = input.substr(peg$currPos, 5);
                                                    if (s2.toLowerCase() === peg$c25) {
                                                      peg$currPos += 5;
                                                    } else {
                                                      s2 = peg$FAILED;
                                                      if (peg$silentFails === 0) { peg$fail(peg$e45); }
                                                    }
                                                    if (s2 === peg$FAILED) {
                                                      s2 = input.substr(peg$currPos, 5);
                                                      if (s2.toLowerCase() === peg$c26) {
                                                        peg$currPos += 5;
                                                      } else {
                                                        s2 = peg$FAILED;
                                                        if (peg$silentFails === 0) { peg$fail(peg$e46); }
                                                      }
                                                      if (s2 === peg$FAILED) {
                                                        s2 = input.substr(peg$currPos, 5);
                                                        if (s2.toLowerCase() === peg$c27) {
                                                          peg$currPos += 5;
                                                        } else {
                                                          s2 = peg$FAILED;
                                                          if (peg$silentFails === 0) { peg$fail(peg$e47); }
                                                        }
                                                        if (s2 === peg$FAILED) {
                                                          s2 = input.substr(peg$currPos, 5);
                                                          if (s2.toLowerCase() === peg$c28) {
                                                            peg$currPos += 5;
                                                          } else {
                                                            s2 = peg$FAILED;
                                                            if (peg$silentFails === 0) { peg$fail(peg$e48); }
                                                          }
                                                          if (s2 === peg$FAILED) {
                                                            s2 = input.substr(peg$currPos, 5);
                                                            if (s2.toLowerCase() === peg$c29) {
                                                              peg$currPos += 5;
                                                            } else {
                                                              s2 = peg$FAILED;
                                                              if (peg$silentFails === 0) { peg$fail(peg$e49); }
                                                            }
                                                            if (s2 === peg$FAILED) {
                                                              s2 = input.substr(peg$currPos, 5);
                                                              if (s2.toLowerCase() === peg$c30) {
                                                                peg$currPos += 5;
                                                              } else {
                                                                s2 = peg$FAILED;
                                                                if (peg$silentFails === 0) { peg$fail(peg$e50); }
                                                              }
                                                              if (s2 === peg$FAILED) {
                                                                s2 = input.substr(peg$currPos, 5);
                                                                if (s2.toLowerCase() === peg$c31) {
                                                                  peg$currPos += 5;
                                                                } else {
                                                                  s2 = peg$FAILED;
                                                                  if (peg$silentFails === 0) { peg$fail(peg$e51); }
                                                                }
                                                                if (s2 === peg$FAILED) {
                                                                  s2 = input.substr(peg$currPos, 5);
                                                                  if (s2.toLowerCase() === peg$c32) {
                                                                    peg$currPos += 5;
                                                                  } else {
                                                                    s2 = peg$FAILED;
                                                                    if (peg$silentFails === 0) { peg$fail(peg$e52); }
                                                                  }
                                                                  if (s2 === peg$FAILED) {
                                                                    s2 = input.substr(peg$currPos, 5);
                                                                    if (s2.toLowerCase() === peg$c3) {
                                                                      peg$currPos += 5;
                                                                    } else {
                                                                      s2 = peg$FAILED;
                                                                      if (peg$silentFails === 0) { peg$fail(peg$e22); }
                                                                    }
                                                                    if (s2 === peg$FAILED) {
                                                                      s2 = peg$currPos;
                                                                      s3 = peg$currPos;
                                                                      s4 = input.substr(peg$currPos, 3);
                                                                      if (s4.toLowerCase() === peg$c33) {
                                                                        peg$currPos += 3;
                                                                      } else {
                                                                        s4 = peg$FAILED;
                                                                        if (peg$silentFails === 0) { peg$fail(peg$e53); }
                                                                      }
                                                                      if (s4 !== peg$FAILED) {
                                                                        s5 = [];
                                                                        s6 = peg$parse_();
                                                                        while (s6 !== peg$FAILED) {
                                                                          s5.push(s6);
                                                                          s6 = peg$parse_();
                                                                        }
                                                                        s6 = [];
                                                                        s7 = peg$parsedashes();
                                                                        while (s7 !== peg$FAILED) {
                                                                          s6.push(s7);
                                                                          s7 = peg$parsedashes();
                                                                        }
                                                                        s7 = [];
                                                                        s8 = peg$parse_();
                                                                        while (s8 !== peg$FAILED) {
                                                                          s7.push(s8);
                                                                          s8 = peg$parse_();
                                                                        }
                                                                        s8 = '';
                                                                        s4 = [s4, s5, s6, s7, s8];
                                                                        s3 = s4;
                                                                      } else {
                                                                        peg$currPos = s3;
                                                                        s3 = peg$FAILED;
                                                                      }
                                                                      if (s3 !== peg$FAILED) {
                                                                        s2 = input.substring(s2, peg$currPos);
                                                                      } else {
                                                                        s2 = s3;
                                                                      }
                                                                      if (s2 === peg$FAILED) {
                                                                        s2 = input.substr(peg$currPos, 4);
                                                                        if (s2.toLowerCase() === peg$c34) {
                                                                          peg$currPos += 4;
                                                                        } else {
                                                                          s2 = peg$FAILED;
                                                                          if (peg$silentFails === 0) { peg$fail(peg$e54); }
                                                                        }
                                                                        if (s2 === peg$FAILED) {
                                                                          s2 = input.substr(peg$currPos, 4);
                                                                          if (s2.toLowerCase() === peg$c35) {
                                                                            peg$currPos += 4;
                                                                          } else {
                                                                            s2 = peg$FAILED;
                                                                            if (peg$silentFails === 0) { peg$fail(peg$e55); }
                                                                          }
                                                                          if (s2 === peg$FAILED) {
                                                                            s2 = input.substr(peg$currPos, 4);
                                                                            if (s2.toLowerCase() === peg$c1) {
                                                                              peg$currPos += 4;
                                                                            } else {
                                                                              s2 = peg$FAILED;
                                                                              if (peg$silentFails === 0) { peg$fail(peg$e20); }
                                                                            }
                                                                            if (s2 === peg$FAILED) {
                                                                              s2 = input.substr(peg$currPos, 4);
                                                                              if (s2.toLowerCase() === peg$c36) {
                                                                                peg$currPos += 4;
                                                                              } else {
                                                                                s2 = peg$FAILED;
                                                                                if (peg$silentFails === 0) { peg$fail(peg$e56); }
                                                                              }
                                                                              if (s2 === peg$FAILED) {
                                                                                s2 = input.substr(peg$currPos, 4);
                                                                                if (s2.toLowerCase() === peg$c37) {
                                                                                  peg$currPos += 4;
                                                                                } else {
                                                                                  s2 = peg$FAILED;
                                                                                  if (peg$silentFails === 0) { peg$fail(peg$e57); }
                                                                                }
                                                                                if (s2 === peg$FAILED) {
                                                                                  s2 = input.substr(peg$currPos, 3);
                                                                                  if (s2.toLowerCase() === peg$c38) {
                                                                                    peg$currPos += 3;
                                                                                  } else {
                                                                                    s2 = peg$FAILED;
                                                                                    if (peg$silentFails === 0) { peg$fail(peg$e58); }
                                                                                  }
                                                                                  if (s2 === peg$FAILED) {
                                                                                    s2 = input.substr(peg$currPos, 3);
                                                                                    if (s2.toLowerCase() === peg$c39) {
                                                                                      peg$currPos += 3;
                                                                                    } else {
                                                                                      s2 = peg$FAILED;
                                                                                      if (peg$silentFails === 0) { peg$fail(peg$e59); }
                                                                                    }
                                                                                    if (s2 === peg$FAILED) {
                                                                                      s2 = input.substr(peg$currPos, 3);
                                                                                      if (s2.toLowerCase() === peg$c40) {
                                                                                        peg$currPos += 3;
                                                                                      } else {
                                                                                        s2 = peg$FAILED;
                                                                                        if (peg$silentFails === 0) { peg$fail(peg$e60); }
                                                                                      }
                                                                                      if (s2 === peg$FAILED) {
                                                                                        s2 = input.substr(peg$currPos, 3);
                                                                                        if (s2.toLowerCase() === peg$c41) {
                                                                                          peg$currPos += 3;
                                                                                        } else {
                                                                                          s2 = peg$FAILED;
                                                                                          if (peg$silentFails === 0) { peg$fail(peg$e61); }
                                                                                        }
                                                                                      }
                                                                                    }
                                                                                  }
                                                                                }
                                                                              }
                                                                            }
                                                                          }
                                                                        }
                                                                      }
                                                                    }
                                                                  }
                                                                }
                                                              }
                                                            }
                                                          }
                                                        }
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
    if (s2 !== peg$FAILED) {
      s1 = input.substring(s1, peg$currPos);
    } else {
      s1 = s2;
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$f12(s1);
    }
    s0 = s1;
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e18); }
    }

    return s0;
  }

 /* utils */
  function formatOutput(parsed = []) {
	const result = parsed
    	.filter(Boolean)
        .map((p) => p.values)
        .join(' ');
	return result;
  }
  
  function getIngredients(parsed = []) {
  	const result = parsed
    	.filter((p) => p.type === 'ingredient')
        .map((p) => p.values)
    return result;
  }

  peg$result = peg$startRuleFunction();

  if (options.peg$library) {
    return /** @type {any} */ ({
      peg$result,
      peg$currPos,
      peg$FAILED,
      peg$maxFailExpected,
      peg$maxFailPos
    });
  }
  if (peg$result !== peg$FAILED && peg$currPos === input.length) {
    return peg$result;
  } else {
    if (peg$result !== peg$FAILED && peg$currPos < input.length) {
      peg$fail(peg$endExpectation());
    }

    throw peg$buildStructuredError(
      peg$maxFailExpected,
      peg$maxFailPos < input.length ? input.charAt(peg$maxFailPos) : null,
      peg$maxFailPos < input.length
        ? peg$computeLocation(peg$maxFailPos, peg$maxFailPos + 1)
        : peg$computeLocation(peg$maxFailPos, peg$maxFailPos)
    );
  }
}

const peg$allowedStartRules = [
  "start"
];

export {
  peg$allowedStartRules as StartRules,
  peg$SyntaxError as SyntaxError,
  peg$parse as parse
};
