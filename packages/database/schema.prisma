// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearchPostgres"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}


// prisma/schemas/auth.prisma
// Authentication module
// Contains user authentication and session management

enum UserType {
  ADMIN
  USER
}

model User {
  id            String    @id @default(cuid())
  name          String?
  username      String   @unique
  email         String   @unique
  passwordHash  String
  sessions Session[]

  userType UserType @default(USER)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Session {
  id           String   @id
  expiresAt    DateTime
  userId       String
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId, expiresAt])
}

// prisma/schemas/notes.prisma
// Notes module
// Contains note processing and status tracking

enum NoteStatus {
  PENDING
  PROCESSING
  COMPLETED
  FAILED
  DUPLICATE
}

enum ErrorCode {
  HTML_PARSE_ERROR
  INGREDIENT_PARSE_ERROR
  INSTRUCTION_PARSE_ERROR
  QUEUE_JOB_FAILED
  IMAGE_UPLOAD_FAILED
  UNKNOWN_ERROR
}

model EvernoteMetadata {
  id String @id @default(cuid())

  evernoteGUID        String?
  source              String?
  notebook            String?
  tags        String[]
  originalCreatedAt   DateTime?

  evernoteCreatedAt DateTime?
  evernoteUpdatedAt DateTime?

  note Note?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}



model Note {
  id                  String    @id @default(cuid())
  title               String?
  html                String @db.Text // For large HTML content
  status              NoteStatus @default(PENDING)

  evernoteMetadataId String? @unique
  evernoteMetadata   EvernoteMetadata? @relation(fields: [evernoteMetadataId], references: [id], onDelete: Cascade)
  
  totalIngredientLines Int @default(0)
  totalInstructionLines Int @default(0)
  parsingErrorCount     Int     @default(0)

  parsedIngredientLines ParsedIngredientLine[]
  parsedInstructionLines ParsedInstructionLine[]
  queueJobs QueueJob[]
  statusEvents NoteStatusEvent[]
  images Image[] // Relation to images

  errorMessage String?
  errorCode ErrorCode?
  errorDetails Json?
  duplicateConfidence Float? // Confidence level (0.0 to 1.0) when note is marked as duplicate
  titleSimHash String? // SimHash of the title for similarity comparison

  categories Category[]
  tags       Tag[]
  sources    Source[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([titleSimHash]) // Index for SimHash similarity queries
}

model NoteStatusEvent {
  id String @id @default(cuid())
  
  status NoteStatus
  errorMessage String?
  errorCode ErrorCode?
  errorDetails Json?
  
  // For tracking progress (e.g., "ingredients (1/5) processed")
  currentCount Int?
  totalCount Int?
  
  // Additional context about what was being processed
  context String? // e.g., "ingredient line parsing", "image upload", etc.
  
  note Note @relation(fields: [noteId], references: [id], onDelete: Cascade)
  noteId String
  
  createdAt DateTime @default(now())
  
  @@index([noteId])
  @@index([status])
  @@index([createdAt])
  @@index([noteId, createdAt])  // for filtering by note + time
  @@index([status, createdAt])  // for filtering by status + time
} 

// prisma/schemas/images.prisma
// Images module
// Contains image processing and storage

model Image {
  id String @id @default(cuid())
  
  // Original uploaded image
  originalImageUrl String
  
  // Different aspect ratio crops
  thumbnailImageUrl String? // 1:1 square thumbnail
  crop3x2ImageUrl String? // 3:2 aspect ratio crop
  crop4x3ImageUrl String? // 4:3 aspect ratio crop
  crop16x9ImageUrl String? // 16:9 aspect ratio crop
  
  // Metadata
  originalWidth Int?
  originalHeight Int?
  originalSize Int? // File size in bytes
  originalFormat String? // jpg, png, etc.
  
  // Processing status
  processingStatus String @default("PENDING") // PENDING, PROCESSING, COMPLETED, FAILED
  processingError String?
  
  // Relations
  note Note @relation(fields: [noteId], references: [id], onDelete: Cascade)
  noteId String
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  @@index([noteId])
  @@index([processingStatus])
} 

// prisma/schemas/queue.prisma
// Queue module
// Contains background job processing and queue management

enum QueueJobStatus {
  PENDING
  PROCESSING
  COMPLETED
  FAILED
  CANCELLED
}

enum QueueJobType {
  PROCESS_NOTE
  PROCESS_INGREDIENT_LINE
  PROCESS_INSTRUCTION_LINE
}

model QueueJob {
  id String @id @default(cuid())
  
  jobId String @unique
  type QueueJobType
  status QueueJobStatus @default(PENDING)
  
  data Json?
  
  errorMessage String?
  errorCode ErrorCode?
  errorDetails Json?
  retryCount Int @default(0)
  maxRetries Int @default(3)
  
  startedAt DateTime?
  completedAt DateTime?
  
  note Note @relation(fields: [noteId], references: [id], onDelete: Cascade)
  noteId String
  
  // Only one of these should be set based on job type
  ingredientLine ParsedIngredientLine? @relation(fields: [ingredientLineId], references: [id])
  ingredientLineId String?
  
  instructionLine ParsedInstructionLine? @relation(fields: [instructionLineId], references: [id])
  instructionLineId String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([noteId])
  @@index([status])
  @@index([type])
} 

// prisma/schemas/parsing.prisma
enum ParseStatus {
  AWAITING_PARSING
  COMPLETED_WITH_ERROR
  COMPLETED_SUCCESSFULLY
}

enum ReviewStatus {
  UNREVIEWED
  CORRECT
  INCORRECT
}

// Parsing module
// Contains parsed content from recipe notes

model ParsedIngredientLine {
  id String @id @default(cuid())

  blockIndex Int
  lineIndex  Int
  reference  String
  rule       String?

  parseStatus ParseStatus @default(AWAITING_PARSING)
  reviewStatus ReviewStatus @default(UNREVIEWED)
  parsedAt              DateTime?
  parsed                ParsedSegment[]
  queueJobs QueueJob[]

  ingredientReferences IngredientReference[]

  // New field to mark lines as active/inactive
  isActive Boolean @default(true)

  Note   Note?   @relation(fields: [noteId], references: [id], onDelete: Cascade)
  noteId String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([noteId])
  @@index([isActive])
}

model ParsedInstructionLine {
  id String @id @default(cuid())

  lineIndex Int
  originalText String
  normalizedText String?

  parseStatus ParseStatus @default(AWAITING_PARSING)
  reviewStatus ReviewStatus @default(UNREVIEWED)

  isActive Boolean @default(true)

  note   Note?   @relation(fields: [noteId], references: [id], onDelete: Cascade)
  noteId String?
  queueJobs QueueJob[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([noteId])
  @@index([isActive])
}

model ParsedSegment {
  id String @id @default(cuid())

  index Int
  rule  String
  type  String
  value String
  processingTime Int? // Processing time in milliseconds

  ingredientLine   ParsedIngredientLine @relation(fields: [ingredientLineId], references: [id], onDelete: Cascade)
  ingredientLineId String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([ingredientLineId])
}

model UniqueLinePattern {
  id String @id @default(cuid())

  // Short code for the pattern (e.g., "AMOUNT_UNIT_INGREDIENT")
  patternCode String @unique

  // JSON array of rule strings in order
  ruleSequence Json

  // Example line that matches this pattern
  exampleLine String?

  // Count of times this pattern has been seen
  occurrenceCount Int @default(1)

  // First time this pattern was seen
  firstSeenAt DateTime @default(now())

  // Last time this pattern was seen
  lastSeenAt DateTime @updatedAt

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([patternCode])
  @@index([occurrenceCount])
} 

// prisma/schemas/meta.prisma
// Meta module
// Contains categorization and tagging

model Category {
  id String @id @default(cuid())

  name String

  notes Note[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Tag {
  id String @id @default(cuid())

  name String

  notes Note[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
} 

// prisma/schemas/source.prisma
// Source module
// Contains source tracking and references

model Source {
  id String @id @default(cuid())

  // URLs associated with this source
  urls URL[]
  
  // Book information (optional)
  book Book? @relation(fields: [bookId], references: [id])
  bookId String?

  // Notes that reference this source
  notes Note[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Website {
  id String @id @default(cuid())

  siteName String?
  domainName String?
  
  // URLs associated with this website
  urls URL[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([domainName])
  @@index([siteName])
}

model URL {
  id String @id @default(cuid())

  author String?
  url String
  lastAccessed DateTime?
  isBrokenLink Boolean @default(false)

  // Website this URL belongs to
  website Website? @relation(fields: [websiteId], references: [id])
  websiteId String?

  // Source this URL belongs to
  source Source @relation(fields: [sourceId], references: [id])
  sourceId String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([url])
  @@index([lastAccessed])
  @@index([isBrokenLink])
}

model Book {
  id String @id @default(cuid())

  title String
  author String?
  publisher String?
  publicationDate DateTime?
  isbn String?

  sources Source[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
} 

// prisma/schemas/ingredients.prisma
model Ingredient {
  id               String               @id @default(cuid())
  name             String
  plural           String?
  isReviewed       Boolean              @default(false)
  reviewedAt       DateTime?
  isComposedIngredient Boolean           @default(false) // Indicates if this ingredient can also be a recipe

  // Alias names (e.g. "Granny Smith")
  aliases          Alias[]

  // Tag-style properties (e.g. dairy, nut, vegan, etc.)
  properties       IngredientProperty[]

  // Optional substitutions (self-relations)
  substitutions    Ingredient[]         @relation("Substitutions")
  substitutedBy    Ingredient[]         @relation("Substitutions")

  // Variant system (self-relation to parent ingredient)
  variants         Ingredient[]         @relation("Variants")
  parentIngredient Ingredient?          @relation("Variants", fields: [parentIngredientId], references: [id])
  parentIngredientId String?

  isChildVariant   Boolean              @default(false) // true if this is a variant of another

  // Category (e.g. "fruit", "meat")
  categoryId       String?
  category         IngredientCategory?  @relation(fields: [categoryId], references: [id])

  // Tags (flexible labeling like "low-carb", "breakfast")
  tags             IngredientTag[]

  // References to where this ingredient was found
  references       IngredientReference[]

  // Brands (many-to-many)
  brands           Brand[]              @relation("IngredientBrands")

  createdAt        DateTime             @default(now())
  updatedAt        DateTime             @updatedAt
}

model Alias {
  id           String     @id @default(cuid())
  name         String
  plural       String?
  ingredient   Ingredient @relation(fields: [ingredientId], references: [id])
  ingredientId String
}

model IngredientProperty {
  id            String        @id @default(cuid())
  ingredient    Ingredient    @relation(fields: [ingredientId], references: [id])
  ingredientId  String
  propertyType  PropertyType
}

// Track where ingredients are found in parsed lines
model IngredientReference {
  id                String      @id @default(cuid())
  
  // The ingredient that was found
  ingredient        Ingredient  @relation(fields: [ingredientId], references: [id], onDelete: Cascade)
  ingredientId      String
  
  // The parsed line where it was found
  parsedLine        ParsedIngredientLine @relation(fields: [parsedLineId], references: [id], onDelete: Cascade)
  parsedLineId      String
  
  // The segment within the line where it was found
  segmentIndex      Int         // Index within the parsed segments
  
  // Context from the original line
  reference         String      // The full original text (e.g., "2 cups flour")
  noteId            String?     // Optional link to the note
  
  // Metadata
  context           String?     // Additional context (e.g., "main ingredient", "garnish")
  
  createdAt         DateTime    @default(now())
  updatedAt         DateTime    @updatedAt

  @@unique([ingredientId, parsedLineId, segmentIndex])
  @@index([ingredientId])
  @@index([parsedLineId])
  @@index([noteId])
}

enum PropertyType {
  // Dietary
  VEGAN
  VEGETARIAN
  GLUTEN_FREE

  // Core types
  MEAT
  FISH
  DAIRY
  EGG
  GRAIN
  LEGUME
  FRUIT
  VEGETABLE
  HERB
  SPICE

  // Allergens
  NUTS
  SHELLFISH
  SOY
  SESAME
  CORN
  ALCOHOL
}

model IngredientCategory {
  id          String       @id @default(cuid())
  name        String
  ingredients Ingredient[]
}

model IngredientTag {
  id           String       @id @default(cuid())
  name         String       @unique
  ingredients  Ingredient[] // Many-to-many relation
}

model Brand {
  id          String        @id @default(cuid())
  name        String        @unique
  ingredients Ingredient[] @relation("IngredientBrands")
}

