// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearch"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserType {
  ADMIN
  USER
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  password      String?

  userType UserType @default(USER)

  accounts Account[]
  sessions Session[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Note {
  id                  String    @id @default(cuid())
  // we only get the guid if we're importing directly from the sdk
  evernoteGUID        String?
  title               String
  source              String?
  historicalCreatedAt DateTime?

  // categories Category[]
  // tags       Tag[]

  image                 String?
  content               String? @db.Text
  containsParsingErrors Boolean @default(false)

  ingredients  IngredientLine[]
  instructions InstructionLine[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model IngredientLine {
  id String @id @default(cuid())

  blockIndex Int
  lineIndex  Int
  reference  String
  rule       String?

  containsParsingErrors Boolean         @default(false)
  parsedAt              DateTime?
  parsed                ParsedSegment[]

  // recipe   Recipe? @relation(fields: [recipeId], references: [id])
  // recipeId String?

  Note   Note?   @relation(fields: [noteId], references: [id])
  noteId String?

  // ingredient   Ingredient? @relation(fields: [ingredientId], references: [id])
  // ingredientId String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([noteId])
}

model InstructionLine {
  id String @id @default(cuid())

  lineIndex Int
  reference String

  note   Note?   @relation(fields: [noteId], references: [id])
  noteId String?

  // recipe   Recipe? @relation(fields: [recipeId], references: [id])
  // recipeId String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([noteId])
}

model ParsedSegment {
  id String @id @default(cuid())

  index Int
  rule  String
  type  String
  value String

  // ingredient   Ingredient? @relation(fields: [ingredientId], references: [id])
  // ingredientId String?     @map("ingredient_id")

  ingredientLine   IngredientLine @relation(fields: [ingredientLineId], references: [id])
  ingredientLineId String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([ingredientLineId])
}
