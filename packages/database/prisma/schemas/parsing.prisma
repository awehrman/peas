enum ParseStatus {
  PENDING
  CORRECT
  INCORRECT
  ERROR
}

// Parsing module
// Contains parsed content from recipe notes

model ParsedIngredientLine {
  id String @id @default(cuid())

  blockIndex Int
  lineIndex  Int
  reference  String
  rule       String?

  parseStatus ParseStatus @default(PENDING)
  parsedAt              DateTime?
  parsed                ParsedSegment[]
  queueJobs QueueJob[]

  // References to ingredients found in this line
  ingredientReferences IngredientReference[]

  Note   Note?   @relation(fields: [noteId], references: [id], onDelete: Cascade)
  noteId String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([noteId])
}

model ParsedInstructionLine {
  id String @id @default(cuid())

  lineIndex Int
  originalText String
  normalizedText String?

  parseStatus ParseStatus @default(PENDING)

  note   Note?   @relation(fields: [noteId], references: [id], onDelete: Cascade)
  noteId String?
  queueJobs QueueJob[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([noteId])
}

model ParsedSegment {
  id String @id @default(cuid())

  index Int
  rule  String
  type  String
  value String

  ingredientLine   ParsedIngredientLine @relation(fields: [ingredientLineId], references: [id], onDelete: Cascade)
  ingredientLineId String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([ingredientLineId])
} 