enum ParseStatus {
  AWAITING_PARSING
  COMPLETED_WITH_ERROR
  COMPLETED_SUCCESSFULLY
}

enum ReviewStatus {
  UNREVIEWED
  CORRECT
  INCORRECT
}

// Parsing module
// Contains parsed content from recipe notes

model ParsedIngredientLine {
  id String @id @default(cuid())

  blockIndex Int
  lineIndex  Int
  reference  String
  rule       String?

  parseStatus ParseStatus @default(AWAITING_PARSING)
  reviewStatus ReviewStatus @default(UNREVIEWED)
  parsedAt              DateTime?
  parsed                ParsedSegment[]
  queueJobs QueueJob[]

  ingredientReferences IngredientReference[]

  // New field to mark lines as active/inactive
  isActive Boolean @default(true)

  Note   Note?   @relation(fields: [noteId], references: [id], onDelete: Cascade)
  noteId String?

  // Link to the unique line pattern
  uniqueLinePattern   UniqueLinePattern? @relation(fields: [uniqueLinePatternId], references: [id])
  uniqueLinePatternId String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([noteId])
  @@index([isActive])
  @@index([uniqueLinePatternId])
}

model ParsedInstructionLine {
  id String @id @default(cuid())

  lineIndex Int
  originalText String
  normalizedText String?

  parseStatus ParseStatus @default(AWAITING_PARSING)
  reviewStatus ReviewStatus @default(UNREVIEWED)

  isActive Boolean @default(true)

  note   Note?   @relation(fields: [noteId], references: [id], onDelete: Cascade)
  noteId String?
  queueJobs QueueJob[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([noteId])
  @@index([isActive])
}

model ParsingRule {
  id String @id @default(cuid())

  // "#1_ingredientLine >> #3_ingredients >> #2_ingredientExpression >> #2_ingredient"
  name String @unique

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Related parsed segments
  parsedSegments ParsedSegment[]

  @@index([name])
}

model ParsedSegment {
  id String @id @default(cuid())

  index Int
  rule  String
  type  String
  value String
  processingTime Int? // Processing time in milliseconds

  ingredientLine   ParsedIngredientLine @relation(fields: [ingredientLineId], references: [id], onDelete: Cascade)
  ingredientLineId String

  // Reference to the parsing rule
  parsingRule   ParsingRule? @relation(fields: [ruleId], references: [id])
  ruleId        String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([ingredientLineId])
  @@index([ruleId])
}

model UniqueLinePattern {
  id String @id @default(cuid())

  // Array of parsing rule IDs in order
  ruleIds String[]

  // Example line that matches this pattern
  exampleLine String?

  // Count of times this pattern has been seen
  occurrenceCount Int @default(1)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Related parsed ingredient lines
  parsedIngredientLines ParsedIngredientLine[]

  @@unique([ruleIds])
  @@index([occurrenceCount])
} 